#include <stdio.h>
#include <malloc.h>

void limpa_buffer(){
  char c;
  while((c = getchar()) != '\n' && c != EOF);
}/*Funcao alternativa para a limpeza de buffer*/

typedef struct aux {
  struct aux *ponteiro_prox;
  int chave;
}elem; /*Definindo a estrutura de um elemento da lista*/
int cont = 0;

/*____________________LETRA A_________________*/
elem *inicializar(elem *elem1){
  elem1 = NULL;
  return elem1;
}

/*____________________LETRA B________________*/
int contador(elem *elem1){ /*Conta o número de elementos na lista*/
  if(elem1 == NULL){
    return 0;
  }
  if((*elem1).ponteiro_prox == NULL){
    cont++;
    return cont;
  }

  cont++;
  contador((*elem1).ponteiro_prox);
  return cont;
}

/*____________________LETRA C________________*/
void mostrar_elementos(elem *elem1){
  if(elem1 == NULL){
    printf("Nao ha elemetos para mostrar\n");
  }
  else{

    printf("%d\n", (*elem1).chave);
    if((*elem1).ponteiro_prox != NULL){
      mostrar_elementos((*elem1).ponteiro_prox);
    }
  }
}
/*____________________LETRA D________________*/
elem *Inserir_Ordenado (elem *elem1, int inserido){

  if(elem1 == NULL){
      elem1 = malloc(sizeof(elem));
      (*elem1).chave = inserido;
      (*elem1).ponteiro_prox = NULL;
      printf("A chave foi inserida com sucesso.\n");
      return elem1;
  }
  if((*elem1).chave < inserido){
      (*elem1).ponteiro_prox = Inserir_Ordenado((*elem1).ponteiro_prox, inserido);
      return elem1;
  }
  else if((*elem1).chave == inserido){
      printf("Esta chave já se encontra na lista.\n");
      return elem1;
  }

  elem *elem2 = malloc(sizeof(elem));
  (*elem2).chave = inserido;
  (*elem2).ponteiro_prox = elem1;
  printf("A chave foi inserida com sucesso.\n");
  return elem2;
}

/*____________________LETRA E________________*/
elem *eliminar_elemento(elem *elem1, int chave_eliminar){ /*recebe como segundo argumento a chave a ser eliminada*/
  elem *aux;

  if((*elem1).chave == chave_eliminar){ /**/
    aux = (*elem1).ponteiro_prox;
    free(elem1);
    printf("Elemento eliminado com sucesso.\n");
    return aux;
  }
  else if((*elem1).chave != chave_eliminar && (*elem1).ponteiro_prox != NULL){
    (*elem1).ponteiro_prox = eliminar_elemento((*elem1).ponteiro_prox, chave_eliminar);
  }
  else if((*elem1).chave != chave_eliminar && (*elem1).ponteiro_prox == NULL){
    printf("Este elemento nao esta na lista.\n");
  }
  return elem1;
}

/*____________________LETRA F________________*/
elem *reinicializar(elem *elem1){
  if(elem1 == NULL){
    return NULL;
  }
  if((*elem1).ponteiro_prox == NULL){
    free(elem1);
    return NULL;
  }
  reinicializar((*elem1).ponteiro_prox);
  free(elem1);
  return NULL;
}

int main(){

  int chave_eliminar, chave_inserida;
  char funcao;
  elem *elem1 = malloc(1*sizeof(elem)); /* Alocando memória para o primeiro elemento da lista*/
  elem *ponteiro_inicio = elem1; /*Guardando no ponteiro para início o endereço do primeiro elemento da lista*/
  (*elem1).chave = 12; /*Atribuindo valor da chave do primeiro elemento*/
  (*elem1).ponteiro_prox = malloc(1*sizeof(elem)); /*Alocando memória para o próximo elemento*/
  elem *elem2 = (*elem1).ponteiro_prox;
  (*elem2).chave = 13;
  (*elem2).ponteiro_prox = malloc(1*sizeof(elem));
  elem *elem3 = (*elem2).ponteiro_prox;
  (*elem3).chave = 14;
  (*elem3).ponteiro_prox = malloc(1*sizeof(elem));
  elem *elem4 = (*elem3).ponteiro_prox;
  (*elem4).chave = 16;
  (*elem4).ponteiro_prox = NULL;/*Não há mais elementos*/

  do{
    cont = 0;
    printf("\nQual funcao gostaria de realizar?\n");
    printf("A para inicializar;\n");
    printf("B para contar elementos;\n");
    printf("C para imprimir as chaves dos elementos;\n");
    printf("D para inserir um novo elemento na lista;\n");
    printf("E para remover um elemento da lista;\n");
    printf("F para reinicializar a lista;\n");
    printf("G para sair;\nDigite(maiusculo):\n");
    funcao = getchar();
    limpa_buffer();



    if(funcao == 'A'){
      ponteiro_inicio = inicializar(ponteiro_inicio);
      printf("Lista inicializada com sucesso.\n");
    }
    else if(funcao == 'B'){
      printf("O numero de elementos e: %d\n", contador(ponteiro_inicio));
    }
    else if(funcao == 'C'){
      mostrar_elementos(ponteiro_inicio);
    }
    else if(funcao == 'D'){
      printf("Qual chave deve ser inserida?\n");
      scanf("%d", &chave_inserida);
      limpa_buffer();
      ponteiro_inicio = Inserir_Ordenado(ponteiro_inicio, chave_inserida);
    }
    else if(funcao == 'E'){
      printf("Qual elemento deve ser eliminado?\n");
      scanf("%d", &chave_eliminar);
      limpa_buffer();
      ponteiro_inicio = eliminar_elemento(ponteiro_inicio, chave_eliminar);
    }
    else if(funcao == 'F'){
       ponteiro_inicio = reinicializar(ponteiro_inicio);
       printf("Lista reinicializada com sucesso.\n");
    }
  }while(funcao != 'G');

  return 0;
}
