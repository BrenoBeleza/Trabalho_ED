#include <stdio.h>
#include <malloc.h>

void limpa_buffer(){
  char c;
  while((c = getchar()) != '\n' && c != EOF);
} /*Funcao alternativa para a limpeza de buffer*/

int contador = 0;

typedef struct{
  int valor, campo_extra;
} estrutura_chave;

typedef struct aux{
  estrutura_chave chave;
  struct aux *ponteiro_prox;
}elem;

typedef struct{
  elem *ponteiro_inicio;
  elem *ponteiro_fim;
}FILA;

typedef struct{
  int topo_e, topo_d;
  elem elem_pilha[50];
}pilha_estrutura;

/*____________________LETRA A_________________*/
void inicializar(FILA *inicio_fim){
  (*inicio_fim).ponteiro_inicio = NULL;
  (*inicio_fim).ponteiro_fim = NULL;
}

/*____________________LETRA B_________________*/
int contar_elementos(elem *elem1){
  if(elem1 == NULL){
    return contador;
  }
  if((*elem1).ponteiro_prox == NULL){
    contador++;
    return contador;
  }
  else{
    contador++;
    return contar_elementos((*elem1).ponteiro_prox);
  }
}

/*____________________LETRA C_________________*/
void mostrar_campos_extras(elem *elem1){
  if(elem1 == NULL){
    printf("A lista está vazia!\n");
    return;
  }
  if((*elem1).ponteiro_prox == NULL){
    printf("%d\n", (*elem1).chave.campo_extra);
    return;
  }
  else{
    printf("%d\n", (*elem1).chave.campo_extra);
    mostrar_campos_extras((*elem1).ponteiro_prox);
  }
}

/*____________________LETRA D_________________*/
void mostrar_elementos(elem *elem1){
  if(elem1 == NULL){
    printf("A lista está vazia!\n");
    return;
  }
  if((*elem1).ponteiro_prox == NULL){
    printf("%d\n", (*elem1).chave.valor);
    return;
  }
  else{
    printf("%d\n", (*elem1).chave.valor);
    mostrar_elementos((*elem1).ponteiro_prox);
  }
}

/*____________________LETRA E_________________*/
elem *inserir_elemento(elem *elem4){
  int chave_inserida, campo_extra_inserido = 0;
  printf("Digite a chave a ser inserida:\n");
  scanf("%d", &chave_inserida);
  limpa_buffer();
  do{
    printf("Agora digite o valor do campo extra(entre zero e dez):\n");
    scanf("%d", &campo_extra_inserido);
    limpa_buffer();
    if(campo_extra_inserido < 0 || campo_extra_inserido > 10){
      printf("O valor do campo extra tem que estar entre zero e dez\n");
    }
  }while(campo_extra_inserido < 0 || campo_extra_inserido > 10);

  elem *elem_novo = malloc(1*sizeof(elem));
  (*elem4).ponteiro_prox = elem_novo;
  (*elem_novo).ponteiro_prox = NULL;
  (*elem_novo).chave.valor = chave_inserida;
  (*elem_novo).chave.campo_extra = campo_extra_inserido;
  return elem_novo;
}

/*____________________LETRA F_________________*/
void excluir_elemento(elem *elem1, FILA *inicio_fim, pilha_estrutura *pilha, elem *elem_ultimo){
  char funcao_pilha;
  int i;
  (*inicio_fim).ponteiro_inicio = (*elem1).ponteiro_prox;
  if((*elem1).chave.campo_extra <= 5){
    if((((*pilha).topo_e + 1) + (50 - (*pilha).topo_d)) == 50){
      printf("A pilha esta cheia. O que quer fazer?\nDigite:");
      printf("A) reinicializar pilha e continuar processo;\n");
      printf("B) Deslocar elementos da pilha para o final da fila e continuar processo;\n");
      printf("C) Deixar a pilha cheia.\n");
      scanf("%c", &funcao_pilha);
      limpa_buffer();
      if(funcao_pilha == 'A'){
        (*pilha).topo_e = -1;
        (*pilha).topo_d = 50;
        (*pilha).topo_e++;
        (*pilha).elem_pilha[(*pilha).topo_e] = *elem1;
      }
      else if(funcao_pilha == 'B'){
        (*elem_ultimo).ponteiro_prox = &(*pilha).elem_pilha[0];
        for(i = 1; i < 50; i++){

          (*pilha).elem_pilha[i-1].ponteiro_prox = &(*pilha).elem_pilha[i];
          (*pilha).elem_pilha[i].ponteiro_prox = NULL;
        }
        (*pilha).topo_e = -1;
        (*pilha).topo_d = 50;
        (*pilha).topo_e++;
        (*pilha).elem_pilha[(*pilha).topo_e] = *elem1;
      }
      else if(funcao_pilha == 'C'){
        free(elem1);
      }

    }
    else{
      (*pilha).topo_e++;
      (*pilha).elem_pilha[(*pilha).topo_e] = *elem1;
    }
  }
  else{
    if((((*pilha).topo_e + 1) + (50 - (*pilha).topo_d)) == 50){
      printf("A pilha esta cheia. O que quer fazer?\n");
      printf("A) reinicializar pilha e continuar processo;\n");
      printf("B) Deslocar elementos da pilha para o final da fila e continuar processo;\n");
      printf("C) Deixar a pilha cheia e eliminar o elemento excluido.\nDigite(maiusculo):\n");
      scanf("%c", &funcao_pilha);
      limpa_buffer();
      if(funcao_pilha == 'A'){
        (*pilha).topo_e = -1;
        (*pilha).topo_d = 50;
        (*pilha).topo_d--;
        (*pilha).elem_pilha[(*pilha).topo_d] = *elem1;
      }
      else if(funcao_pilha == 'B'){
        (*elem_ultimo).ponteiro_prox = &(*pilha).elem_pilha[0];
        for(i = 1; i < 50; i++){

          (*pilha).elem_pilha[i-1].ponteiro_prox = &(*pilha).elem_pilha[i];
          (*pilha).elem_pilha[i].ponteiro_prox = NULL;
        }
        (*pilha).topo_e = -1;
        (*pilha).topo_d = 50;
        (*pilha).topo_d--;
        (*pilha).elem_pilha[(*pilha).topo_d] = *elem1;
      }
      else if(funcao_pilha == 'C'){
        free(elem1);
      }
    }
    else{
      (*pilha).topo_d--;
      (*pilha).elem_pilha[(*pilha).topo_d] = *elem1;
    }
  }
  printf("Agora o que quer fazer?\n");
  printf("A) Checar se a pilha está vazia;\n");
  printf("B) Contar todos os elementos da pilha;\n");
  printf("C) Contar os elementos cujo campo extra seja menor ou igual a 5;\n");
  printf("D) Contar os elementos cujo campo extra seja maior que 5.\nDigite(maiusculo):\n");
  scanf(" %c", &funcao_pilha);
  limpa_buffer();

  if(funcao_pilha == 'A'){
    if((*pilha).topo_d == 50 && (*pilha).topo_e == -1){
      printf("A pilha esta vazia!\n");
    }
    else{
      printf("A pilha não esta vazia!\n");
    }
  }
  else if(funcao_pilha == 'B'){
    printf("a pilha tem um total de %d elementos\n", (((*pilha).topo_e + 1) + (50 -(*pilha).topo_d)));
  }
  else if(funcao_pilha == 'C'){
    printf("a pilha tem %d elementos cujo campo extra e menor ou igual a 5\n", ((*pilha).topo_e+1));
  }
  else if(funcao_pilha == 'D'){
    printf("a pilha tem %d elementos cujo campo extra e maior que 5\n", (50 - (*pilha).topo_d));
  }

  return;
}

/*____________________LETRA G_________________*/
void reinicializar(elem *elem1, FILA *inicio_fim){
  if(elem1 == NULL){
    (*inicio_fim).ponteiro_fim = NULL;
    return;
  }
  if((*elem1).ponteiro_prox == NULL){
    (*inicio_fim).ponteiro_inicio = NULL;
    (*inicio_fim).ponteiro_fim = NULL;
    free(elem1);
    return;

  }
  else{
    reinicializar((*elem1).ponteiro_prox, inicio_fim);
    free(elem1);
    return;
  }
}

int main(){
  char funcao;
  FILA inicio_fim;
  pilha_estrutura pilha;
  elem *elem1 = malloc(1*sizeof(elem)); /* Alocando memória para o primeiro elemento da fila*/
  (inicio_fim).ponteiro_inicio = elem1; /*Guardando no ponteiro para início o endereço do primeiro elemento da fila*/
  (*elem1).chave.valor = 22; /*Atribuindo valor da chave do primeiro elemento*/
  (*elem1).chave.campo_extra = 1;
  (*elem1).ponteiro_prox = malloc(1*sizeof(elem)); /*Alocando memória para o próximo elemento*/
  elem *elem2 = (*elem1).ponteiro_prox;
  (*elem2).chave.valor = 23;
  (*elem2).chave.campo_extra = 2;
  (*elem2).ponteiro_prox = malloc(1*sizeof(elem));
  elem *elem3 = (*elem2).ponteiro_prox;
  (*elem3).chave.valor = 24;
  (*elem3).chave.campo_extra = 3;
  (*elem3).ponteiro_prox = malloc(1*sizeof(elem));
  elem *elem4 = (*elem3).ponteiro_prox;
  (*elem4).chave.valor = 25;
  (*elem4).chave.campo_extra = 4;
  (*elem4).ponteiro_prox = NULL;/*Não há mais elementos, portanto aponta para NULL*/
  (inicio_fim).ponteiro_fim = elem4;/*Guardando no ponteiro para fim o endereço do ultimo elemento da fila*/
  pilha.topo_d = 50;
  pilha.topo_e = -1;

  do{
    printf("\nQual funcao gostaria de realizar?\n");
    printf("A para inicializar;\n");
    printf("B para contar elementos;\n");
    printf("C para imprimir os campos extras dos elementos;\n");
    printf("D para imprimir as chaves dos elementos;\n");
    printf("E para inserir um elemento;\n");
    printf("F para remover um elemento;\n");
    printf("G para reinicializar;\n");
    printf("H para sair.\nDigite(maiusculo):\n");
    scanf("%c", &funcao);
    limpa_buffer();

    if(funcao == 'A'){
      inicializar(&inicio_fim);
    }
    else if(funcao == 'B'){
      printf("%d\n", contar_elementos((inicio_fim).ponteiro_inicio));
    }
    else if(funcao == 'C'){
      mostrar_campos_extras((inicio_fim).ponteiro_inicio);
    }
    else if(funcao == 'D'){
      mostrar_elementos((inicio_fim).ponteiro_inicio);
    }
    else if(funcao == 'E'){
      (inicio_fim).ponteiro_fim = inserir_elemento(inicio_fim.ponteiro_fim);
    }
    else if(funcao == 'F'){
      excluir_elemento(inicio_fim.ponteiro_inicio, &inicio_fim, &pilha, inicio_fim.ponteiro_fim);
    }
    else if(funcao == 'G'){
      reinicializar(inicio_fim.ponteiro_inicio, &inicio_fim);
    }
  }while(funcao != 'H');
  mostrar_elementos((inicio_fim).ponteiro_inicio);

  return 0;
}
